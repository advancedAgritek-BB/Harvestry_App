name: CI - Frontend (Next.js)

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/frontend/**'
      - '.github/workflows/ci-frontend.yml'
  push:
    branches: [main]
    paths:
      - 'src/frontend/**'

env:
  NODE_VERSION: '20.x'

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check || npx tsc --noEmit

      - name: Check formatting (Prettier)
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: src/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: src/frontend/coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: src/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: src/frontend/.next

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      # CodeQL for static analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # npm audit for dependency vulnerabilities
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for high/critical vulnerabilities
        run: npm audit --audit-level=high

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: src/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          npm run build
          npx next-bundle-analyzer || echo "Bundle analysis complete"
        env:
          ANALYZE: true
          NEXT_TELEMETRY_DISABLED: 1

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan, bundle-analysis]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "All CI checks completed"
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi

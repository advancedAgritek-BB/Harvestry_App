name: CI - .NET Backend

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - 'src/shared/**'
      - 'src/database/**'
      - '.github/workflows/ci-dotnet.yml'
  push:
    branches: [main]
    paths:
      - 'src/backend/**'
      - 'src/shared/**'
      - 'src/database/**'

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Check code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        service:
          - identity
          - organizations
          - spatial
          - inventory
          - processing
          - sensors
          - irrigation-fertigation
          - environment
          - interlocks
          - closed-loop
          - lifecycle
          - tasks
          - messaging
          - slack-bridge
          - compliance-metrc
          - compliance-biotrack
          - quickbooks
          - labeling
          - analytics
          - ai-models
          - sustainability
          - predictive-maintenance
          - gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        working-directory: src/backend/services
        run: dotnet restore

      - name: Build service
        working-directory: src/backend/services
        run: dotnet build --configuration Release --no-restore

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service:
          - identity
          - organizations
          - spatial
          - inventory
          - processing
          - sensors
          - irrigation-fertigation
          - environment
          - interlocks
          - closed-loop
          - lifecycle
          - tasks
          - messaging
          - slack-bridge
          - compliance-metrc
          - compliance-biotrack
          - quickbooks
          - labeling
          - analytics
          - ai-models
          - sustainability
          - predictive-maintenance
          - gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        working-directory: src/backend/services
        run: dotnet restore

      - name: Run unit tests
        working-directory: src/backend/services
        run: dotnet test --configuration Release --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: '**/test-results.trx'

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.service }}
          path: '**/coverage.cobertura.xml'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for analysis
        run: dotnet build --configuration Release --no-restore

      # CodeQL for static analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: List vulnerabilities
        run: dotnet list package --vulnerable --include-transitive

      - name: Check for outdated packages
        run: dotnet list package --outdated

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, build, test, security-scan, dependency-audit]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "All CI checks completed"
          if [ "${{ needs.lint-and-format.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.dependency-audit.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
